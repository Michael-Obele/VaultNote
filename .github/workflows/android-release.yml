
name: Build VaultNote Android

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor

permissions:
  contents: write

concurrency:
  group: publish-vaultnote-android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-android-version:
    runs-on: ubuntu-22.04
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
      clean_version: ${{ steps.set_clean_version.outputs.clean_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install json for version update
        run: bun add -g json
      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ github.event.inputs.version_bump || 'patch' }}
          release_branches: main
          tag_prefix: vaultnote-android-v
          branch_history: compare
          bump_policy: default
      - name: Set clean version
        id: set_clean_version
        run: |
          CLEAN_VERSION="${{ steps.bump_version.outputs.new_tag }}"
          CLEAN_VERSION="${CLEAN_VERSION#vaultnote-android-v}"
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
      - name: Update tauri.conf.json version
        run: |
          bunx --bun json -I -f src-tauri/tauri.conf.json -e "this.version='${{ steps.set_clean_version.outputs.clean_version }}'"
      - name: Commit version changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src-tauri/tauri.conf.json
          git commit -m "ci: Android version bump to ${{ steps.bump_version.outputs.new_tag }} [skip ci]" || true
          git push || true

  build-tauri-android:
    needs: prepare-android-version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Android dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: /usr/local/lib/android/sdk
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/*.yml') }}
      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 8512546
          accept-android-sdk-licenses: true
          packages: platforms;android-34 build-tools;34.0.0 ndk;26.1.10909125
      - name: Verify Android NDK path
        run: |
          echo "ANDROID_NDK_HOME is $ANDROID_NDK_HOME"
          ls -l "$ANDROID_NDK_HOME" || echo "ANDROID_NDK_HOME not found or inaccessible"
          ls -l "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" || echo "NDK toolchain not found or inaccessible"
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64,armv7,i686,x86_64
      - name: Verify Rust Android targets
        run: rustup target list --installed
      - name: Install Tauri CLI
        run: cargo install --locked tauri-cli
      - name: Cache Rust artifacts
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target
      - name: Install frontend dependencies
        run: bun install
      - name: Build frontend
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build
      - name: Build Android APK
        run: cargo tauri android build --target aarch64,armv7,i686,x86_64


  create-android-release:
    needs: [build-tauri-android, prepare-android-version]
    runs-on: ubuntu-22.04
    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: vaultnote-android
          path: dist/android
      - name: Prepare Android assets for release
        run: ls -R dist
      - name: Create GitHub Release (Android)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-android-version.outputs.new_tag }}
          name: "VaultNote Android ${{ needs.prepare-android-version.outputs.clean_version }}"
          body: "Android release of VaultNote. See the assets to download this version and install."
          draft: false
          prerelease: false
          files: |
            dist/android/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

