name: Release & Build Tauri

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      bump:
        description: "Force version bump type"
        required: false
        type: choice
        options: ["patch", "minor", "major"]

jobs:
  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Validate version parity
        run: |
          set -euo pipefail
          pkg=$(node -p "require('./package.json').version")
          # Run enhanced sync script to ensure all versions are synchronized
          node scripts/sync-versions.js
          # Now verify all are in sync
          cargo=$(sed -n 's/^version = "\(.*\)"/\1/p' src-tauri/Cargo.toml | head -n1)
          echo "package.json: $pkg"
          echo "src-tauri/Cargo.toml: $cargo"
          echo "src-tauri/tauri.conf.json: points to ../package.json"
          if [ "$pkg" != "$cargo" ]; then
            echo "Version mismatch detected between package.json and src-tauri/Cargo.toml"
            exit 1
          fi
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

  publish-tauri:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target aarch64-apple-darwin
          - platform: macos-latest
            args: --target x86_64-apple-darwin
          - platform: ubuntu-22.04
            args: ""
          - platform: windows-latest
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Debug version in tauri.conf.json and Cargo.toml
        run: |
          cat src-tauri/tauri.conf.json
          cat src-tauri/Cargo.toml

      - name: Ensure versions are synchronized
        shell: bash
        run: |
          echo "Using sync-versions.js script to ensure Cargo.toml matches package.json"
          echo "Note: tauri.conf.json now uses ../package.json as version source"
          # Sync Cargo.toml with package.json version
          node scripts/sync-versions.js
          echo "Updated src-tauri/Cargo.toml:"
          sed -n '1,40p' src-tauri/Cargo.toml

      - name: Install system deps (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - run: bun install

      - name: Build web assets
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        with:
          projectPath: src-tauri
          tagName: ${{ needs.release-please.outputs.tag_name }}
          releaseName: "VaultNote ${{ needs.release-please.outputs.tag_name }}"
          releaseBody: "See the assets below to download and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.platform == 'macos-latest' && matrix.args || '' }}

  publish-android:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Debug version in tauri.conf.json and Cargo.toml
        run: |
          cat src-tauri/tauri.conf.json
          if [ -f src-tauri/tauri.android.conf.json ]; then cat src-tauri/tauri.android.conf.json; fi
          cat src-tauri/Cargo.toml

      - name: Ensure versions are synchronized
        shell: bash
        run: |
          echo "Using sync-versions.js script to ensure Cargo.toml matches package.json"
          echo "Note: tauri.conf.json now uses ../package.json as version source"
          # Sync Cargo.toml with package.json version
          node scripts/sync-versions.js
          echo "Updated src-tauri/Cargo.toml:"
          sed -n '1,40p' src-tauri/Cargo.toml

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK & NDK
        uses: android-actions/setup-android@v3
        with:
          packages: "tools platform-tools build-tools;34.0.0"

      - name: Install SDK / Build-tools / NDK and verify apksigner
        run: |
          sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"
          # Add build-tools to PATH to ensure apksigner is available
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          # Verify apksigner is available
          which apksigner || echo "apksigner not found in PATH"
          apksigner --version || echo "apksigner not executable"

      - name: Export NDK_HOME
        run: echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

      - name: Setup Rust toolchain w/ Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Cache Rust / Android build artifacts
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '^2.0'

      - name: Debug Tauri CLI version
        run: cargo tauri --version

      - name: Install JS dependencies
        run: bun install

      - name: Build web assets for Android
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build

      - name: Ensure Android project exists
        run: |
          if [ ! -f src-tauri/gen/android/app/build.gradle.kts ]; then
            cd src-tauri
            cargo tauri android init -y || true
          fi

      - name: Decode signing keystore
        shell: bash
        run: |
          set -euo pipefail
          # Check if the secret exists and is not empty
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "Error: ANDROID_KEYSTORE secret is empty or not set."
            echo "Please ensure the ANDROID_KEYSTORE secret is configured with a base64-encoded keystore file."
            exit 1
          fi
          # Decode the keystore
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > vaultnote-release.keystore
          # Verify keystore was created and has content
          if [ ! -s vaultnote-release.keystore ]; then
            echo "Error: Keystore file is empty or was not created."
            echo "This usually means the base64 string in ANDROID_KEYSTORE secret is invalid."
            exit 1
          fi
          # Show keystore info for debugging (without revealing sensitive data)
          echo "Keystore file created successfully:"
          ls -la vaultnote-release.keystore
          file vaultnote-release.keystore

      - name: Write signing config
        shell: bash
        run: |
          cd src-tauri/gen/android
          {
            echo "storeFile=$GITHUB_WORKSPACE/vaultnote-release.keystore"
            echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}"
            echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}"
          } > keystore.properties

      - name: Debug keystore.properties (sanitized)
        run: |
          set -euo pipefail
          file=src-tauri/gen/android/keystore.properties
          [ -f "$file" ] || { echo "keystore.properties missing"; exit 1; }
          grep -E '^(storeFile|keyAlias)=' "$file" || true

      - name: Build Android (APK & AAB)
        shell: bash
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: |
          cd src-tauri
          cargo tauri android build

      - name: List Android build outputs
        shell: bash
        run: |
          echo "Checking Android build outputs:"
          ls -la src-tauri/gen/android/app/build/outputs/apk/universal/release/ || echo "APK directory not found"
          ls -la src-tauri/gen/android/app/build/outputs/bundle/universalRelease/ || echo "AAB directory not found"

      - name: Rename Android files for release
        shell: bash
        run: |
          # Get app version from package.json
          APP_VERSION=$(node -p "require('./package.json').version")
          APP_NAME="VaultNote"

          # Rename APK files
          APK_DIR="src-tauri/gen/android/app/build/outputs/apk/universal/release"
          if [ -d "$APK_DIR" ]; then
            cd "$APK_DIR"
            for apk in app-*.apk; do
              if [ -f "$apk" ]; then
                new_name="${APP_NAME}_${APP_VERSION}_${apk#app-}"
                echo "Renaming $apk to $new_name"
                mv "$apk" "$new_name"
              fi
            done
            ls -la
          fi

          # Rename AAB files
          AAB_DIR="src-tauri/gen/android/app/build/outputs/bundle/universalRelease"
          if [ -d "$AAB_DIR" ]; then
            cd "$AAB_DIR"
            for aab in app-*.aab; do
              if [ -f "$aab" ]; then
                new_name="${APP_NAME}_${APP_VERSION}_${aab#app-}"
                echo "Renaming $aab to $new_name"
                mv "$aab" "$new_name"
              fi
            done
            ls -la
          fi

      - name: Upload Android APK to Release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/VaultNote_*.apk

      - name: Upload Android AAB to Release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/VaultNote_*.aab
