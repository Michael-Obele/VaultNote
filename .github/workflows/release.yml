name: Build and Release VaultNote (Desktops)

# Define the workflow triggers
on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type (patch, minor)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor

# Set permissions for writing to the repository (needed for commits and releases)
permissions:
  contents: write

jobs:
  # Job to bump the version and update tauri.conf.json
  version-bump:
    # Only run on manual dispatch
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
      clean_version: ${{ steps.set_clean_version.outputs.clean_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: "0" # Full history needed for version bumping

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install json for version update
        run: bun add -g json

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.67.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ github.event.inputs.version_bump }}
          release_branches: main
          tag_prefix: vaultnote-v
          branch_history: compare
          bump_policy: "default"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set clean version
        id: set_clean_version
        run: |
          CLEAN_VERSION=${{ steps.bump_version.outputs.new_tag }}
          CLEAN_VERSION=${CLEAN_VERSION#vaultnote-v}
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Update tauri.conf.json version
        run: |
          bunx --bun json -I -f src-tauri/tauri.conf.json -e "this.version='${{ steps.set_clean_version.outputs.clean_version }}'"

      - name: Commit version changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src-tauri/tauri.conf.json
          git commit -m "ci: version bump to ${{ steps.bump_version.outputs.new_tag }} [skip ci]"
          git push

  # Job to build the Tauri application for multiple platforms
  build:
    needs: version-bump # Depends on version-bump to get the updated tauri.conf.json
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            bundles: deb appimage rpm
            artifact_name: linux
          - os: macos-latest
            bundles: dmg app
            artifact_name: macos
          - os: windows-latest
            bundles: msi nsis
            artifact_name: windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install frontend dependencies
        run: bun install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust artifacts
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Update tauri.conf.json version (tag push)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG_VERSION=${{ github.ref_name }}
          CLEAN_VERSION=${TAG_VERSION#v}
          bunx --bun json -I -f src-tauri/tauri.conf.json -e "this.version='$CLEAN_VERSION'"

      - name: Build frontend
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build

      - name: Build Tauri application
        continue-on-error: true # Continue even if some bundles fail
        run: bun run tauri build --bundles ${{ matrix.bundles }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.artifact_name }}
          path: src-tauri/target/release/bundle/**
          if-no-files-found: ignore

  # Job to create a GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [build, version-bump]
    # Run on tag push or manual dispatch with a new tag
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && needs.version-bump.outputs.new_tag != '')
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-linux
          path: artifacts/linux
        continue-on-error: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-macos
          path: artifacts/macos
        continue-on-error: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-windows
          path: artifacts/windows
        continue-on-error: true

      - name: Check if any artifacts exist
        id: check-artifacts
        run: |
          if [ -n "$(find artifacts -type f)" ]; then
            echo "artifacts_found=true" >> $GITHUB_ENV
          else
            echo "artifacts_found=false" >> $GITHUB_ENV
          fi

      - name: Set release tag and version
        id: set_release_vars
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            CLEAN_VERSION=${{ github.ref_name }}
            CLEAN_VERSION=${CLEAN_VERSION#v}
            echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag_name=${{ needs.version-bump.outputs.new_tag }}" >> $GITHUB_OUTPUT
            echo "clean_version=${{ needs.version-bump.outputs.clean_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: env.artifacts_found == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          name: VaultNote ${{ steps.set_release_vars.outputs.clean_version }}
          tag_name: ${{ steps.set_release_vars.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
