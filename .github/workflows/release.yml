name: Release & Build Tauri

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      bump:
        description: "Force version bump type"
        required: false
        type: choice
        options: ["patch", "minor", "major"]

jobs:
  lint-workflow:
    name: Lint workflow files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run YAML linter (super-linter)
        uses: github/super-linter@v4
        env:
          VALIDATE_YAML: true
          VALIDATE_WORKFLOW: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-please:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

  publish-tauri:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: --target aarch64-apple-darwin
          - platform: macos-latest
            args: --target x86_64-apple-darwin
          - platform: ubuntu-22.04
            args: ""
          - platform: windows-latest
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Ensure version consistency
        shell: bash
        run: |
          VERSION=$(echo "${{ needs.release-please.outputs.tag_name }}" | sed 's/^v//')
          echo "Updating version to: $VERSION"

          # Update tauri.conf.json
          jq --arg version "$VERSION" '.version = $version' src-tauri/tauri.conf.json > tmp.json
          mv tmp.json src-tauri/tauri.conf.json

          # Update Cargo.toml version
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            sed -i "s/^version = .*/version = \"$VERSION\"/" src-tauri/Cargo.toml
          else
            sed -i "s/^version = .*/version = \"$VERSION\"/" src-tauri/Cargo.toml
          fi

          echo "=== Updated files ==="
          cat src-tauri/tauri.conf.json | jq .version
          grep "^version" src-tauri/Cargo.toml

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - run: bun install

      - name: Build web assets
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        with:
          projectPath: src-tauri
          tagName: ${{ needs.release-please.outputs.tag_name }}
          releaseName: "VaultNote ${{ needs.release-please.outputs.tag_name }}"
          releaseBody: "See the assets below to download and install."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  publish-android:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Android SDK & NDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          sdkmanager --install "platforms;android-34" "build-tools;34.0.0" "ndk;25.2.9519653"

      - name: Export NDK_HOME
        run: echo "NDK_HOME=$ANDROID_NDK_ROOT" >> $GITHUB_ENV

      - name: Setup Rust toolchain with Android targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Cache Rust build artifacts
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri -> target

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '^2.0'

      - name: Install JS dependencies
        run: bun install

      - name: Build web assets for Android
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: bun run vite build

      - name: Ensure version consistency
        shell: bash
        run: |
          VERSION=$(echo "${{ needs.release-please.outputs.tag_name }}" | sed 's/^v//')
          echo "Updating version to: $VERSION"

          # Update tauri.conf.json
          jq --arg version "$VERSION" '.version = $version' src-tauri/tauri.conf.json > tmp.json
          mv tmp.json src-tauri/tauri.conf.json

          # Update Cargo.toml version
          sed -i "s/^version = .*/version = \"$VERSION\"/" src-tauri/Cargo.toml

          echo "=== Updated tauri.conf.json ==="
          cat src-tauri/tauri.conf.json | jq .version
          echo "=== Updated Cargo.toml version ==="
          grep "^version" src-tauri/Cargo.toml

      - name: Setup Android signing keystore
        shell: bash
        run: |
          set -euo pipefail

          # Decode keystore from base64
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > vaultnote-release.keystore

          if [ ! -s vaultnote-release.keystore ]; then
            echo "Error: Keystore file is empty or was not created."
            exit 1
          fi

          # Create keystore.properties for Gradle
          cd src-tauri/gen/android
          cat > keystore.properties << EOF
          storeFile=$GITHUB_WORKSPACE/vaultnote-release.keystore
          storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF

          echo "=== Keystore properties created ==="
          cat keystore.properties

      - name: Verify Gradle build configuration
        shell: bash
        run: |
          cd src-tauri/gen/android/app

          # Check if build.gradle.kts has proper signing configuration
          if ! grep -q "signingConfigs" build.gradle.kts; then
            echo "Warning: build.gradle.kts may not have signing configuration"
            echo "=== Current build.gradle.kts content ==="
            cat build.gradle.kts
          fi

      - name: Build signed Android APK and AAB
        shell: bash
        env:
          VITE_LOGIN_URL: ${{ secrets.VITE_LOGIN_URL }}
        run: |
          cd src-tauri

          echo "=== Building Android release ==="
          cargo tauri android build --verbose

          echo "=== Build completed, checking outputs ==="
          find gen/android/app/build/outputs -name "*.apk" -o -name "*.aab" | head -10

      - name: Verify APK and AAB signatures
        shell: bash
        run: |
          # Find the generated files
          APK_PATH=$(find src-tauri/gen/android/app/build/outputs -name "*release*.apk" | head -1)
          AAB_PATH=$(find src-tauri/gen/android/app/build/outputs -name "*release*.aab" | head -1)

          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            echo "=== Verifying APK signature: $APK_PATH ==="
            aapt dump badging "$APK_PATH" | grep "package:"
            jarsigner -verify -verbose "$APK_PATH" || echo "APK verification failed"
          else
            echo "Warning: No release APK found"
          fi

          if [ -n "$AAB_PATH" ] && [ -f "$AAB_PATH" ]; then
            echo "=== Found AAB: $AAB_PATH ==="
            ls -la "$AAB_PATH"
          else
            echo "Warning: No release AAB found"
          fi

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-builds
          path: |
            src-tauri/gen/android/app/build/outputs/apk/**/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/**/*.aab
          if-no-files-found: warn

      - name: Upload to GitHub Release
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find and upload APK files
          find src-tauri/gen/android/app/build/outputs -name "*.apk" -type f | while read apk; do
            if [ -f "$apk" ]; then
              echo "Uploading: $apk"
              gh release upload "${{ needs.release-please.outputs.tag_name }}" "$apk" --clobber
            fi
          done

          # Find and upload AAB files
          find src-tauri/gen/android/app/build/outputs -name "*.aab" -type f | while read aab; do
            if [ -f "$aab" ]; then
              echo "Uploading: $aab"
              gh release upload "${{ needs.release-please.outputs.tag_name }}" "$aab" --clobber
            fi
          done
